# region imports
from AlgorithmImports import *
from DualMomentumAlphaModel import DualMomentumAlphaModel
from MyPcm import *

from CustomImmediateExecutionModel import CustomImmediateExecutionModel
# endregion

# Define the sector ETFs (you can adjust this list as needed)
sector_etfs = [
    "XLF",  # Financials
    "XLK",  # Technology
    "XLE",  # Energy
    "XLY",  # Consumer Discretionary
    "XLP",  # Consumer Staples
    "XLI",  # Industrials
    "XLV",  # Health Care
    "XLU",  # Utilities
    "XLRE", # Real Estate
    "XLC",  # Communication Services
    "XLB"   # Materials
]

class SectorDualMomentumStrategy(QCAlgorithm):
    undesired_symbols_from_previous_deployment = []
    checked_symbols_from_previous_deployment = False

    def initialize(self):
        self.set_start_date(2024, 1, 1)
        self.set_end_date(2025, 3, 31)
        self.set_cash(100000)
        
        #self.set_brokerage_model(BrokerageName.INTERACTIVE_BROKERS_BROKERAGE, AccountType.MARGIN)

        self.settings.minimum_order_margin_portfolio_percentage = 0.01
        self.settings.free_portfolio_value_percentage = 0.02

        self.universe_settings.data_normalization_mode = DataNormalizationMode.ADJUSTED
        self.universe_settings.asynchronous = True

        
        # self.etfs = []
        # for ticker in sector_etfs:
        #     symbol = self.add_equity(ticker, Resolution.DAILY).symbol
        #     self.etfs.append(symbol)
        
        # self.add_universe_selection(ManualUniverseSelectionModel(self.etfs))

        self.add_universe(self.universe.etf("SPY", self.universe_settings, self._etf_constituents_filter))





        self.add_alpha(DualMomentumAlphaModel())

        self.settings.rebalance_portfolio_on_security_changes = True
        self.settings.rebalance_portfolio_on_insight_changes = True
        self.day = -1
        self.set_portfolio_construction(RiskParityPortfolioConstructionModel(self._rebalance_func))    
        self.add_risk_management(TrailingStopRiskManagementModel())

        self.set_execution(CustomImmediateExecutionModel(leverage=1.0))

        self.set_warm_up(timedelta(7))

       

    def _etf_constituents_filter(self, constituents: List[ETFConstituentUniverse]) -> List[Symbol]:
        selected = sorted([c for c in constituents if c.weight],
                          key=lambda c: c.weight or 0, reverse=True)[:200]
        symbols = [c.symbol for c in selected]
        return symbols

    def _rebalance_func(self, time):
        if self.day != self.time.day and not self.is_warming_up and self.current_slice.quote_bars.count > 0:
            self.day = self.time.day
            return time
        return None
    


                
    # def on_data(self, data):
    #     # if not self.is_warming_up and not self.checked_symbols_from_previous_deployment:
    #     #     for symbol in self.undesired_symbols_from_previous_deployment:
    #     #         if self.is_market_open(symbol):
    #     #             self.liquidate(symbol, tag="Not backed up by current insights")
    #     #             self.undesired_symbols_from_previous_deployment.remove(symbol)

                
    #     #     for security_holding in self.portfolio.values():
    #     #         if not security_holding.invested:
    #     #             continue
    #     #         symbol = security_holding.symbol
    #     #         if not self.insights.has_active_insights(symbol, self.utc_time):
    #     #             self.undesired_symbols_from_previous_deployment.append(symbol)
    #     #     self.checked_symbols_from_previous_deployment = True

    #     # for symbol in self.undesired_symbols_from_previous_deployment:
    #     #     if self.is_market_open(symbol):
    #     #         self.liquidate(symbol, tag="Not backed up by current insights")
    #     #         self.undesired_symbols_from_previous_deployment.remove(symbol)
